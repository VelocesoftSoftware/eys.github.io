{"ast":null,"code":"var _jsxFileName = \"/Users/berkanium/Desktop/eys-react-leaflet/src/pages/part-of-the-common.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useMap, MapContainer, TileLayer, GeoJSON } from 'react-leaflet';\nimport { circle, intersect } from '@turf/turf';\nimport tileLayer from '../util/tileLayer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst center = [52.22977, 21.01178];\nconst centers = [{\n  lat: 52.22990558765487,\n  lng: 21.01168513298035\n}, {\n  lat: 52.22962958994604,\n  lng: 21.011593937873844\n}, {\n  lat: 52.2297445891999,\n  lng: 21.012012362480167\n}];\nconst options = {\n  steps: 64,\n  units: 'meters',\n  options: {}\n};\nconst intersectionColor = {\n  color: \"yellow\",\n  weight: 2,\n  opacity: 1,\n  fillColor: \"yellow\",\n  fillOpacity: 0.7\n};\nconst radius = 30;\nconst Intersection = () => {\n  _s();\n  const map = useMap();\n  const [polygons, setPolygons] = useState([]);\n  useEffect(() => {\n    centers.map(_ref => {\n      let {\n        lat,\n        lng\n      } = _ref;\n      const polygon = circle([lng, lat], radius, options);\n      return setPolygons(pol => [...pol, polygon]);\n    });\n  }, [map]);\n  return polygons.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GeoJSON, {\n      data: polygons,\n      color: 'red',\n      weight: 2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(GeoJSON, {\n      data: intersect(...polygons),\n      style: intersectionColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true) : null;\n};\n_s(Intersection, \"9PwKmL5AO2uy8FS+KwHG/vpjxh8=\", false, function () {\n  return [useMap];\n});\n_c = Intersection;\nconst MapWrapper = () => {\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: center,\n    zoom: 18,\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      ...tileLayer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Intersection, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_c2 = MapWrapper;\nexport default MapWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"Intersection\");\n$RefreshReg$(_c2, \"MapWrapper\");","map":{"version":3,"names":["useState","useEffect","useMap","MapContainer","TileLayer","GeoJSON","circle","intersect","tileLayer","jsxDEV","_jsxDEV","Fragment","_Fragment","center","centers","lat","lng","options","steps","units","intersectionColor","color","weight","opacity","fillColor","fillOpacity","radius","Intersection","_s","map","polygons","setPolygons","_ref","polygon","pol","length","children","data","fileName","_jsxFileName","lineNumber","columnNumber","style","_c","MapWrapper","zoom","_c2","$RefreshReg$"],"sources":["/Users/berkanium/Desktop/eys-react-leaflet/src/pages/part-of-the-common.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useMap, MapContainer, TileLayer, GeoJSON } from 'react-leaflet';\nimport { circle, intersect } from '@turf/turf';\nimport tileLayer from '../util/tileLayer';\n\nconst center = [52.22977, 21.01178];\n\nconst centers = [\n  { lat: 52.22990558765487, lng: 21.01168513298035 },\n  { lat: 52.22962958994604, lng: 21.011593937873844 },\n  { lat: 52.2297445891999, lng: 21.012012362480167 }\n]\n\nconst options = {\n  steps: 64,\n  units: 'meters',\n  options: {}\n}\n\nconst intersectionColor = {\n  color: \"yellow\",\n  weight: 2,\n  opacity: 1,\n  fillColor: \"yellow\",\n  fillOpacity: 0.7\n};\n\nconst radius = 30;\n\nconst Intersection = () => {\n  const map = useMap();\n  const [polygons, setPolygons] = useState([])\n\n  useEffect(() => {\n\n    centers.map(({ lat, lng }) => {\n      const polygon = circle([lng, lat], radius, options);\n\n      return setPolygons(pol => [...pol, polygon]);\n    })\n\n  }, [map])\n\n  return polygons.length > 0\n    ? (\n      <>\n        <GeoJSON data={polygons} color={'red'} weight={2} />\n        <GeoJSON data={intersect(...polygons)} style={intersectionColor} />\n      </>\n    )\n    : null\n}\n\n\nconst MapWrapper = () => {\n  return (\n    <MapContainer center={center} zoom={18}>\n\n      <TileLayer {...tileLayer} />\n\n      <Intersection />\n\n    </MapContainer>\n  )\n}\n\nexport default MapWrapper;"],"mappings":"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"},"metadata":{},"sourceType":"module"}