{"ast":null,"code":"import{useEffect,useState}from'react';import{MapContainer,useMap,TileLayer,Polyline}from'react-leaflet';import{polygon,transformScale}from'@turf/turf';import tileLayer from'../util/tileLayer';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const center=[52.22977,19.01178];const poland=[[54.80068486732236,18.292236328125004],[53.89786522246521,14.611816406250002],[51.055207338584964,15.281982421875002],[49.57510247172322,19.138183593750004],[50.57626025689928,23.642578125000004],[52.214338608258224,23.148193359375004],[52.86912972768522,23.741455078125],[54.29729354239267,22.928466796875004],[54.29729354239267,19.489746093750004],[54.80068486732236,18.292236328125004]];const MyCountry=()=>{const map=useMap();const[newCoordinates,setCoordinates]=useState(null);useEffect(()=>{if(!map)return;const poly=polygon([poland]);const scalePoly=transformScale(poly,1.05);const{coordinates}=scalePoly.geometry;setCoordinates(coordinates);},[map]);return newCoordinates?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Polyline,{positions:poland,fill:'red',color:'red'}),/*#__PURE__*/_jsx(Polyline,{positions:newCoordinates,fill:'white',color:'white'})]}):null;};const MapWrapper=()=>{return/*#__PURE__*/_jsxs(MapContainer,{center:center,zoom:6,scrollWheelZoom:false,children:[/*#__PURE__*/_jsx(TileLayer,{...tileLayer}),/*#__PURE__*/_jsx(MyCountry,{})]});};export default MapWrapper;","map":{"version":3,"names":["useEffect","useState","MapContainer","useMap","TileLayer","Polyline","polygon","transformScale","tileLayer","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","center","poland","MyCountry","map","newCoordinates","setCoordinates","poly","scalePoly","coordinates","geometry","children","positions","fill","color","MapWrapper","zoom","scrollWheelZoom"],"sources":["/Users/berkanium/Desktop/eys-react-leaflet/src/pages/enlarge-a-polygon-box-by-5-percent.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { MapContainer, useMap, TileLayer, Polyline } from 'react-leaflet';\nimport { polygon, transformScale } from '@turf/turf';\nimport tileLayer from '../util/tileLayer';\n\nconst center = [52.22977, 19.01178];\n\nconst poland = [\n  [54.80068486732236, 18.292236328125004],\n  [53.89786522246521, 14.611816406250002],\n  [51.055207338584964, 15.281982421875002],\n  [49.57510247172322, 19.138183593750004],\n  [50.57626025689928, 23.642578125000004],\n  [52.214338608258224, 23.148193359375004],\n  [52.86912972768522, 23.741455078125],\n  [54.29729354239267, 22.928466796875004],\n  [54.29729354239267, 19.489746093750004],\n  [54.80068486732236, 18.292236328125004]\n];\n\nconst MyCountry = () => {\n  const map = useMap();\n  const [newCoordinates, setCoordinates] = useState(null)\n\n  useEffect(() => {\n    if (!map) return\n\n    const poly = polygon([poland]);\n    const scalePoly = transformScale(poly, 1.05)\n\n    const { coordinates } = scalePoly.geometry;\n\n    setCoordinates(coordinates);\n\n  }, [map])\n\n  return newCoordinates\n    ? (\n      <>\n        <Polyline positions={poland} fill={'red'} color={'red'} />\n        <Polyline positions={newCoordinates} fill={'white'} color={'white'} />\n      </>\n    )\n    : null\n\n}\n\nconst MapWrapper = () => {\n  return (\n    <MapContainer\n      center={center} zoom={6}\n      scrollWheelZoom={false}\n    >\n      <TileLayer {...tileLayer} />\n\n      <MyCountry />\n\n    </MapContainer>\n  )\n}\n\nexport default MapWrapper;"],"mappings":"AAAA,OAASA,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAC3C,OAASC,YAAY,CAAEC,MAAM,CAAEC,SAAS,CAAEC,QAAQ,KAAQ,eAAe,CACzE,OAASC,OAAO,CAAEC,cAAc,KAAQ,YAAY,CACpD,MAAO,CAAAC,SAAS,KAAM,mBAAmB,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,QAAA,IAAAC,SAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAE1C,KAAM,CAAAC,MAAM,CAAG,CAAC,QAAQ,CAAE,QAAQ,CAAC,CAEnC,KAAM,CAAAC,MAAM,CAAG,CACb,CAAC,iBAAiB,CAAE,kBAAkB,CAAC,CACvC,CAAC,iBAAiB,CAAE,kBAAkB,CAAC,CACvC,CAAC,kBAAkB,CAAE,kBAAkB,CAAC,CACxC,CAAC,iBAAiB,CAAE,kBAAkB,CAAC,CACvC,CAAC,iBAAiB,CAAE,kBAAkB,CAAC,CACvC,CAAC,kBAAkB,CAAE,kBAAkB,CAAC,CACxC,CAAC,iBAAiB,CAAE,eAAe,CAAC,CACpC,CAAC,iBAAiB,CAAE,kBAAkB,CAAC,CACvC,CAAC,iBAAiB,CAAE,kBAAkB,CAAC,CACvC,CAAC,iBAAiB,CAAE,kBAAkB,CAAC,CACxC,CAED,KAAM,CAAAC,SAAS,CAAGA,CAAA,GAAM,CACtB,KAAM,CAAAC,GAAG,CAAGf,MAAM,CAAC,CAAC,CACpB,KAAM,CAACgB,cAAc,CAAEC,cAAc,CAAC,CAAGnB,QAAQ,CAAC,IAAI,CAAC,CAEvDD,SAAS,CAAC,IAAM,CACd,GAAI,CAACkB,GAAG,CAAE,OAEV,KAAM,CAAAG,IAAI,CAAGf,OAAO,CAAC,CAACU,MAAM,CAAC,CAAC,CAC9B,KAAM,CAAAM,SAAS,CAAGf,cAAc,CAACc,IAAI,CAAE,IAAI,CAAC,CAE5C,KAAM,CAAEE,WAAY,CAAC,CAAGD,SAAS,CAACE,QAAQ,CAE1CJ,cAAc,CAACG,WAAW,CAAC,CAE7B,CAAC,CAAE,CAACL,GAAG,CAAC,CAAC,CAET,MAAO,CAAAC,cAAc,cAEjBL,KAAA,CAAAF,SAAA,EAAAa,QAAA,eACEf,IAAA,CAACL,QAAQ,EAACqB,SAAS,CAAEV,MAAO,CAACW,IAAI,CAAE,KAAM,CAACC,KAAK,CAAE,KAAM,CAAE,CAAC,cAC1DlB,IAAA,CAACL,QAAQ,EAACqB,SAAS,CAAEP,cAAe,CAACQ,IAAI,CAAE,OAAQ,CAACC,KAAK,CAAE,OAAQ,CAAE,CAAC,EACtE,CAAC,CAEH,IAAI,CAEV,CAAC,CAED,KAAM,CAAAC,UAAU,CAAGA,CAAA,GAAM,CACvB,mBACEf,KAAA,CAACZ,YAAY,EACXa,MAAM,CAAEA,MAAO,CAACe,IAAI,CAAE,CAAE,CACxBC,eAAe,CAAE,KAAM,CAAAN,QAAA,eAEvBf,IAAA,CAACN,SAAS,KAAKI,SAAS,CAAG,CAAC,cAE5BE,IAAA,CAACO,SAAS,GAAE,CAAC,EAED,CAAC,CAEnB,CAAC,CAED,cAAe,CAAAY,UAAU"},"metadata":{},"sourceType":"module"}