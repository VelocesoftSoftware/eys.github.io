{"version":3,"sources":["pages/tiles-gray.js","../node_modules/@react-leaflet/core/esm/pane.js","../node_modules/@react-leaflet/core/esm/events.js","../node_modules/@react-leaflet/core/esm/layer.js","../node_modules/@react-leaflet/core/esm/attribution.js","../node_modules/@react-leaflet/core/esm/component.js","../node_modules/@react-leaflet/core/esm/path.js","../node_modules/@react-leaflet/core/esm/element.js","../node_modules/@react-leaflet/core/esm/control.js","../node_modules/@react-leaflet/core/esm/div-overlay.js","util/tileLayer.js","../node_modules/@react-leaflet/core/esm/generic.js","../node_modules/@react-leaflet/core/esm/grid-layer.js","../node_modules/react-leaflet/esm/TileLayer.js"],"names":["center","MapWrapper","map","setMap","useState","tileRef","useRef","useEffect","current","getContainer","style","setProperty","_jsx","MapContainer","whenReady","zoom","scrollWheelZoom","children","TileLayer","ref","tileLayer","withPane","props","context","_props$pane","pane","useEventHandlers","element","eventHandlers","eventHandlersRef","instance","on","off","useLayerLifecycle","_context$layerContain2","layerContainer","addLayer","_context$layerContain","removeLayer","createLayerHook","useElement","useLeafletContext","elementRef","useAttribution","attribution","attributionRef","attributionControl","removeAttribution","addAttribution","createContainerComponent","ContainerComponent","useImperativeHandle","React","createElement","LeafletProvider","value","forwardRef","createDivOverlayComponent","OverlayComponent","isOpen","setOpen","update","contentNode","_contentNode","createPortal","createLeafComponent","LeafComponent","usePathOptions","optionsRef","pathOptions","_props$pathOptions","options","setStyle","createPathHook","createElementHook","updateElement","propsRef","createControlHook","positionRef","position","addTo","remove","setPosition","createDivOverlayHook","useLifecycle","url","createControlComponent","createInstance","useControl","createLayerComponent","useLayer","createOverlayComponent","useOverlay","createPathComponent","usePath","createTileLayerComponent","updateGridLayer","layer","prevProps","opacity","zIndex","setOpacity","setZIndex","_ref","LeafletTileLayer"],"mappings":"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","file":"static/js/pages-tiles-gray-js.00133149.chunk.js","sourcesContent":["import { useRef, useState, useEffect } from \"react\";\nimport { MapContainer, TileLayer } from \"react-leaflet\";\nimport tileLayer from \"../util/tileLayer\";\n\nconst center = [52.22977, 21.01178];\n\n// -------------------------------------------\n\n// The best way to add the following code to your style\n\n// .leaflet-tile-container {\n//   filter: grayscale(1)\n// }\n\n// Or -----------------------------------------\n\nconst MapWrapper = () => {\n  const [map, setMap] = useState(null);\n  const tileRef = useRef(null);\n\n  useEffect(() => {\n    if (!map) return;\n    tileRef.current.getContainer().style.setProperty(\"filter\", `grayscale(1)`);\n  }, [map]);\n\n  return (\n    <MapContainer\n      whenReady={setMap}\n      center={center}\n      zoom={18}\n      scrollWheelZoom={false}\n    >\n      <TileLayer ref={tileRef} {...tileLayer} />\n    </MapContainer>\n  );\n};\n\nexport default MapWrapper;\n","export function withPane(props, context) {\n  const pane = props.pane ?? context.pane;\n  return pane ? { ...props,\n    pane\n  } : props;\n}","import { useEffect, useRef } from 'react';\nexport function useEventHandlers(element, eventHandlers) {\n  const eventHandlersRef = useRef();\n  useEffect(function addEventHandlers() {\n    if (eventHandlers != null) {\n      element.instance.on(eventHandlers);\n    }\n\n    eventHandlersRef.current = eventHandlers;\n    return function removeEventHandlers() {\n      if (eventHandlersRef.current != null) {\n        element.instance.off(eventHandlersRef.current);\n      }\n\n      eventHandlersRef.current = null;\n    };\n  }, [element, eventHandlers]);\n}","import { useEffect } from 'react';\nimport { useAttribution } from './attribution';\nimport { useLeafletContext } from './context';\nimport { useEventHandlers } from './events';\nimport { withPane } from './pane';\nexport function useLayerLifecycle(element, context) {\n  useEffect(function addLayer() {\n    const container = context.layerContainer ?? context.map;\n    container.addLayer(element.instance);\n    return function removeLayer() {\n      var _context$layerContain;\n\n      (_context$layerContain = context.layerContainer) == null ? void 0 : _context$layerContain.removeLayer(element.instance);\n      context.map.removeLayer(element.instance);\n    };\n  }, [context, element]);\n}\nexport function createLayerHook(useElement) {\n  return function useLayer(props) {\n    const context = useLeafletContext();\n    const elementRef = useElement(withPane(props, context), context);\n    useAttribution(context.map, props.attribution);\n    useEventHandlers(elementRef.current, props.eventHandlers);\n    useLayerLifecycle(elementRef.current, context);\n    return elementRef;\n  };\n}","import { useEffect, useRef } from 'react';\nexport function useAttribution(map, attribution) {\n  const attributionRef = useRef(attribution);\n  useEffect(function updateAttribution() {\n    if (attribution !== attributionRef.current && map.attributionControl != null) {\n      if (attributionRef.current != null) {\n        map.attributionControl.removeAttribution(attributionRef.current);\n      }\n\n      if (attribution != null) {\n        map.attributionControl.addAttribution(attribution);\n      }\n    }\n\n    attributionRef.current = attribution;\n  }, [map, attribution]);\n}","import React, { forwardRef, useEffect, useImperativeHandle, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { LeafletProvider } from './context';\nexport function createContainerComponent(useElement) {\n  function ContainerComponent(props, ref) {\n    const {\n      instance,\n      context\n    } = useElement(props).current;\n    useImperativeHandle(ref, () => instance);\n    return props.children == null ? null : /*#__PURE__*/React.createElement(LeafletProvider, {\n      value: context\n    }, props.children);\n  }\n\n  return /*#__PURE__*/forwardRef(ContainerComponent);\n}\nexport function createDivOverlayComponent(useElement) {\n  function OverlayComponent(props, ref) {\n    const [isOpen, setOpen] = useState(false);\n    const {\n      instance\n    } = useElement(props, setOpen).current;\n    useImperativeHandle(ref, () => instance);\n    useEffect(function updateOverlay() {\n      if (isOpen) {\n        instance.update();\n      }\n    }, [instance, isOpen, props.children]); // @ts-ignore _contentNode missing in type definition\n\n    const contentNode = instance._contentNode;\n    return contentNode ? /*#__PURE__*/createPortal(props.children, contentNode) : null;\n  }\n\n  return /*#__PURE__*/forwardRef(OverlayComponent);\n}\nexport function createLeafComponent(useElement) {\n  function LeafComponent(props, ref) {\n    const {\n      instance\n    } = useElement(props).current;\n    useImperativeHandle(ref, () => instance);\n    return null;\n  }\n\n  return /*#__PURE__*/forwardRef(LeafComponent);\n}","import { useEffect, useRef } from 'react';\nimport { useLeafletContext } from './context';\nimport { useEventHandlers } from './events';\nimport { useLayerLifecycle } from './layer';\nimport { withPane } from './pane';\nexport function usePathOptions(element, props) {\n  const optionsRef = useRef();\n  useEffect(function updatePathOptions() {\n    if (props.pathOptions !== optionsRef.current) {\n      const options = props.pathOptions ?? {};\n      element.instance.setStyle(options);\n      optionsRef.current = options;\n    }\n  }, [element, props]);\n}\nexport function createPathHook(useElement) {\n  return function usePath(props) {\n    const context = useLeafletContext();\n    const elementRef = useElement(withPane(props, context), context);\n    useEventHandlers(elementRef.current, props.eventHandlers);\n    useLayerLifecycle(elementRef.current, context);\n    usePathOptions(elementRef.current, props);\n    return elementRef;\n  };\n}","import { useEffect, useRef } from 'react';\nexport function createElementHook(createElement, updateElement) {\n  if (updateElement == null) {\n    return function useImmutableLeafletElement(props, context) {\n      return useRef(createElement(props, context));\n    };\n  }\n\n  return function useMutableLeafletElement(props, context) {\n    const elementRef = useRef(createElement(props, context));\n    const propsRef = useRef(props);\n    const {\n      instance\n    } = elementRef.current;\n    useEffect(function updateElementProps() {\n      if (propsRef.current !== props) {\n        updateElement(instance, props, propsRef.current);\n        propsRef.current = props;\n      }\n    }, [instance, props, context]);\n    return elementRef;\n  };\n}","import { useEffect, useRef } from 'react';\nimport { useLeafletContext } from './context';\nexport function createControlHook(useElement) {\n  return function useLeafletControl(props) {\n    const context = useLeafletContext();\n    const elementRef = useElement(props, context);\n    const {\n      instance\n    } = elementRef.current;\n    const positionRef = useRef(props.position);\n    const {\n      position\n    } = props;\n    useEffect(function addControl() {\n      instance.addTo(context.map);\n      return function removeControl() {\n        instance.remove();\n      };\n    }, [context.map, instance]);\n    useEffect(function updateControl() {\n      if (position != null && position !== positionRef.current) {\n        instance.setPosition(position);\n        positionRef.current = position;\n      }\n    }, [instance, position]);\n    return elementRef;\n  };\n}","import { useAttribution } from './attribution';\nimport { useLeafletContext } from './context';\nimport { useEventHandlers } from './events';\nimport { withPane } from './pane';\nexport function createDivOverlayHook(useElement, useLifecycle) {\n  return function useDivOverlay(props, setOpen) {\n    const context = useLeafletContext();\n    const elementRef = useElement(withPane(props, context), context);\n    useAttribution(context.map, props.attribution);\n    useEventHandlers(elementRef.current, props.eventHandlers);\n    useLifecycle(elementRef.current, context, props, setOpen);\n    return elementRef;\n  };\n}","const tileLayer = {\n  attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n  url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n}\n\nexport default tileLayer;","import { createContainerComponent, createDivOverlayComponent, createLeafComponent } from './component';\nimport { createControlHook } from './control';\nimport { createElementHook } from './element';\nimport { createLayerHook } from './layer';\nimport { createDivOverlayHook } from './div-overlay';\nimport { createPathHook } from './path';\nexport function createControlComponent(createInstance) {\n  function createElement(props, context) {\n    return {\n      instance: createInstance(props),\n      context\n    };\n  }\n\n  const useElement = createElementHook(createElement);\n  const useControl = createControlHook(useElement);\n  return createLeafComponent(useControl);\n}\nexport function createLayerComponent(createElement, updateElement) {\n  const useElement = createElementHook(createElement, updateElement);\n  const useLayer = createLayerHook(useElement);\n  return createContainerComponent(useLayer);\n}\nexport function createOverlayComponent(createElement, useLifecycle) {\n  const useElement = createElementHook(createElement);\n  const useOverlay = createDivOverlayHook(useElement, useLifecycle);\n  return createDivOverlayComponent(useOverlay);\n}\nexport function createPathComponent(createElement, updateElement) {\n  const useElement = createElementHook(createElement, updateElement);\n  const usePath = createPathHook(useElement);\n  return createContainerComponent(usePath);\n}\nexport function createTileLayerComponent(createElement, updateElement) {\n  const useElement = createElementHook(createElement, updateElement);\n  const useLayer = createLayerHook(useElement);\n  return createLeafComponent(useLayer);\n}","export function updateGridLayer(layer, props, prevProps) {\n  const {\n    opacity,\n    zIndex\n  } = props;\n\n  if (opacity != null && opacity !== prevProps.opacity) {\n    layer.setOpacity(opacity);\n  }\n\n  if (zIndex != null && zIndex !== prevProps.zIndex) {\n    layer.setZIndex(zIndex);\n  }\n}","import { createTileLayerComponent, updateGridLayer, withPane } from '@react-leaflet/core';\nimport { TileLayer as LeafletTileLayer } from 'leaflet';\nexport const TileLayer = createTileLayerComponent(function createTileLayer(_ref, context) {\n  let {\n    url,\n    ...options\n  } = _ref;\n  return {\n    instance: new LeafletTileLayer(url, withPane(options, context)),\n    context\n  };\n}, updateGridLayer);"],"sourceRoot":""}