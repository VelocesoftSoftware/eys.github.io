{"version":3,"sources":["../node_modules/leaflet-fullscreen/dist/Leaflet.fullscreen.js","pages/fullscreen.js","../node_modules/@react-leaflet/core/esm/pane.js","../node_modules/@react-leaflet/core/esm/events.js","../node_modules/@react-leaflet/core/esm/layer.js","../node_modules/@react-leaflet/core/esm/attribution.js","../node_modules/@react-leaflet/core/esm/component.js","../node_modules/@react-leaflet/core/esm/path.js","../node_modules/@react-leaflet/core/esm/element.js","../node_modules/@react-leaflet/core/esm/control.js","../node_modules/@react-leaflet/core/esm/div-overlay.js","util/tileLayer.js","../node_modules/@react-leaflet/core/esm/generic.js","../node_modules/@react-leaflet/core/esm/grid-layer.js","../node_modules/react-leaflet/esm/TileLayer.js"],"names":["L","Control","Fullscreen","extend","options","position","title","onAdd","map","container","DomUtil","create","this","link","href","_map","on","_toggleTitle","DomEvent","_click","e","stopPropagation","preventDefault","toggleFullscreen","isFullscreen","Map","include","_isFullscreen","getContainer","pseudoFullscreen","_disablePseudoFullscreen","document","exitFullscreen","mozCancelFullScreen","webkitCancelFullScreen","msExitFullscreen","_enablePseudoFullscreen","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","Element","ALLOW_KEYBOARD_INPUT","msRequestFullscreen","addClass","_setFullscreen","fire","removeClass","fullscreen","invalidateSize","_onFullscreenChange","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","msFullscreenElement","mergeOptions","fullscreenControl","addInitHook","fullscreenchange","addControl","onFullscreenChange","bind","whenReady","off","control","center","MapWrapper","_jsx","MapContainer","zoom","scrollWheelZoom","children","TileLayer","tileLayer","withPane","props","context","_props$pane","pane","useEventHandlers","element","eventHandlers","eventHandlersRef","useRef","useEffect","instance","current","useLayerLifecycle","_context$layerContain2","layerContainer","addLayer","_context$layerContain","removeLayer","createLayerHook","useElement","useLeafletContext","elementRef","useAttribution","attribution","attributionRef","attributionControl","removeAttribution","addAttribution","createContainerComponent","ContainerComponent","ref","useImperativeHandle","React","createElement","LeafletProvider","value","forwardRef","createDivOverlayComponent","OverlayComponent","isOpen","setOpen","useState","update","contentNode","_contentNode","createPortal","createLeafComponent","LeafComponent","usePathOptions","optionsRef","pathOptions","_props$pathOptions","setStyle","createPathHook","createElementHook","updateElement","propsRef","createControlHook","positionRef","addTo","remove","setPosition","createDivOverlayHook","useLifecycle","url","createControlComponent","createInstance","useControl","createLayerComponent","useLayer","createOverlayComponent","useOverlay","createPathComponent","usePath","createTileLayerComponent","updateGridLayer","layer","prevProps","opacity","zIndex","setOpacity","setZIndex","_ref","LeafletTileLayer"],"mappings":"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","file":"static/js/pages-fullscreen-js.d17a7a85.chunk.js","sourcesContent":["L.Control.Fullscreen = L.Control.extend({\n    options: {\n        position: 'topleft',\n        title: {\n            'false': 'View Fullscreen',\n            'true': 'Exit Fullscreen'\n        }\n    },\n\n    onAdd: function (map) {\n        var container = L.DomUtil.create('div', 'leaflet-control-fullscreen leaflet-bar leaflet-control');\n\n        this.link = L.DomUtil.create('a', 'leaflet-control-fullscreen-button leaflet-bar-part', container);\n        this.link.href = '#';\n\n        this._map = map;\n        this._map.on('fullscreenchange', this._toggleTitle, this);\n        this._toggleTitle();\n\n        L.DomEvent.on(this.link, 'click', this._click, this);\n\n        return container;\n    },\n\n    _click: function (e) {\n        L.DomEvent.stopPropagation(e);\n        L.DomEvent.preventDefault(e);\n        this._map.toggleFullscreen(this.options);\n    },\n\n    _toggleTitle: function() {\n        this.link.title = this.options.title[this._map.isFullscreen()];\n    }\n});\n\nL.Map.include({\n    isFullscreen: function () {\n        return this._isFullscreen || false;\n    },\n\n    toggleFullscreen: function (options) {\n        var container = this.getContainer();\n        if (this.isFullscreen()) {\n            if (options && options.pseudoFullscreen) {\n                this._disablePseudoFullscreen(container);\n            } else if (document.exitFullscreen) {\n                document.exitFullscreen();\n            } else if (document.mozCancelFullScreen) {\n                document.mozCancelFullScreen();\n            } else if (document.webkitCancelFullScreen) {\n                document.webkitCancelFullScreen();\n            } else if (document.msExitFullscreen) {\n                document.msExitFullscreen();\n            } else {\n                this._disablePseudoFullscreen(container);\n            }\n        } else {\n            if (options && options.pseudoFullscreen) {\n                this._enablePseudoFullscreen(container);\n            } else if (container.requestFullscreen) {\n                container.requestFullscreen();\n            } else if (container.mozRequestFullScreen) {\n                container.mozRequestFullScreen();\n            } else if (container.webkitRequestFullscreen) {\n                container.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);\n            } else if (container.msRequestFullscreen) {\n                container.msRequestFullscreen();\n            } else {\n                this._enablePseudoFullscreen(container);\n            }\n        }\n\n    },\n\n    _enablePseudoFullscreen: function (container) {\n        L.DomUtil.addClass(container, 'leaflet-pseudo-fullscreen');\n        this._setFullscreen(true);\n        this.fire('fullscreenchange');\n    },\n\n    _disablePseudoFullscreen: function (container) {\n        L.DomUtil.removeClass(container, 'leaflet-pseudo-fullscreen');\n        this._setFullscreen(false);\n        this.fire('fullscreenchange');\n    },\n\n    _setFullscreen: function(fullscreen) {\n        this._isFullscreen = fullscreen;\n        var container = this.getContainer();\n        if (fullscreen) {\n            L.DomUtil.addClass(container, 'leaflet-fullscreen-on');\n        } else {\n            L.DomUtil.removeClass(container, 'leaflet-fullscreen-on');\n        }\n        this.invalidateSize();\n    },\n\n    _onFullscreenChange: function (e) {\n        var fullscreenElement =\n            document.fullscreenElement ||\n            document.mozFullScreenElement ||\n            document.webkitFullscreenElement ||\n            document.msFullscreenElement;\n\n        if (fullscreenElement === this.getContainer() && !this._isFullscreen) {\n            this._setFullscreen(true);\n            this.fire('fullscreenchange');\n        } else if (fullscreenElement !== this.getContainer() && this._isFullscreen) {\n            this._setFullscreen(false);\n            this.fire('fullscreenchange');\n        }\n    }\n});\n\nL.Map.mergeOptions({\n    fullscreenControl: false\n});\n\nL.Map.addInitHook(function () {\n    if (this.options.fullscreenControl) {\n        this.fullscreenControl = new L.Control.Fullscreen(this.options.fullscreenControl);\n        this.addControl(this.fullscreenControl);\n    }\n\n    var fullscreenchange;\n\n    if ('onfullscreenchange' in document) {\n        fullscreenchange = 'fullscreenchange';\n    } else if ('onmozfullscreenchange' in document) {\n        fullscreenchange = 'mozfullscreenchange';\n    } else if ('onwebkitfullscreenchange' in document) {\n        fullscreenchange = 'webkitfullscreenchange';\n    } else if ('onmsfullscreenchange' in document) {\n        fullscreenchange = 'MSFullscreenChange';\n    }\n\n    if (fullscreenchange) {\n        var onFullscreenChange = L.bind(this._onFullscreenChange, this);\n\n        this.whenReady(function () {\n            L.DomEvent.on(document, fullscreenchange, onFullscreenChange);\n        });\n\n        this.on('unload', function () {\n            L.DomEvent.off(document, fullscreenchange, onFullscreenChange);\n        });\n    }\n});\n\nL.control.fullscreen = function (options) {\n    return new L.Control.Fullscreen(options);\n};\n","import { MapContainer, TileLayer } from 'react-leaflet';\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport tileLayer from '../util/tileLayer';\n\nconst center = [52.22977, 21.01178];\n\nconst MapWrapper = () => {\n  return (\n    <MapContainer\n      fullscreenControl={true}\n      center={center}\n      zoom={13}\n      scrollWheelZoom={false}\n    >\n\n      <TileLayer {...tileLayer} />\n\n    </MapContainer>\n  )\n}\n\nexport default MapWrapper;","export function withPane(props, context) {\n  const pane = props.pane ?? context.pane;\n  return pane ? { ...props,\n    pane\n  } : props;\n}","import { useEffect, useRef } from 'react';\nexport function useEventHandlers(element, eventHandlers) {\n  const eventHandlersRef = useRef();\n  useEffect(function addEventHandlers() {\n    if (eventHandlers != null) {\n      element.instance.on(eventHandlers);\n    }\n\n    eventHandlersRef.current = eventHandlers;\n    return function removeEventHandlers() {\n      if (eventHandlersRef.current != null) {\n        element.instance.off(eventHandlersRef.current);\n      }\n\n      eventHandlersRef.current = null;\n    };\n  }, [element, eventHandlers]);\n}","import { useEffect } from 'react';\nimport { useAttribution } from './attribution';\nimport { useLeafletContext } from './context';\nimport { useEventHandlers } from './events';\nimport { withPane } from './pane';\nexport function useLayerLifecycle(element, context) {\n  useEffect(function addLayer() {\n    const container = context.layerContainer ?? context.map;\n    container.addLayer(element.instance);\n    return function removeLayer() {\n      var _context$layerContain;\n\n      (_context$layerContain = context.layerContainer) == null ? void 0 : _context$layerContain.removeLayer(element.instance);\n      context.map.removeLayer(element.instance);\n    };\n  }, [context, element]);\n}\nexport function createLayerHook(useElement) {\n  return function useLayer(props) {\n    const context = useLeafletContext();\n    const elementRef = useElement(withPane(props, context), context);\n    useAttribution(context.map, props.attribution);\n    useEventHandlers(elementRef.current, props.eventHandlers);\n    useLayerLifecycle(elementRef.current, context);\n    return elementRef;\n  };\n}","import { useEffect, useRef } from 'react';\nexport function useAttribution(map, attribution) {\n  const attributionRef = useRef(attribution);\n  useEffect(function updateAttribution() {\n    if (attribution !== attributionRef.current && map.attributionControl != null) {\n      if (attributionRef.current != null) {\n        map.attributionControl.removeAttribution(attributionRef.current);\n      }\n\n      if (attribution != null) {\n        map.attributionControl.addAttribution(attribution);\n      }\n    }\n\n    attributionRef.current = attribution;\n  }, [map, attribution]);\n}","import React, { forwardRef, useEffect, useImperativeHandle, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { LeafletProvider } from './context';\nexport function createContainerComponent(useElement) {\n  function ContainerComponent(props, ref) {\n    const {\n      instance,\n      context\n    } = useElement(props).current;\n    useImperativeHandle(ref, () => instance);\n    return props.children == null ? null : /*#__PURE__*/React.createElement(LeafletProvider, {\n      value: context\n    }, props.children);\n  }\n\n  return /*#__PURE__*/forwardRef(ContainerComponent);\n}\nexport function createDivOverlayComponent(useElement) {\n  function OverlayComponent(props, ref) {\n    const [isOpen, setOpen] = useState(false);\n    const {\n      instance\n    } = useElement(props, setOpen).current;\n    useImperativeHandle(ref, () => instance);\n    useEffect(function updateOverlay() {\n      if (isOpen) {\n        instance.update();\n      }\n    }, [instance, isOpen, props.children]); // @ts-ignore _contentNode missing in type definition\n\n    const contentNode = instance._contentNode;\n    return contentNode ? /*#__PURE__*/createPortal(props.children, contentNode) : null;\n  }\n\n  return /*#__PURE__*/forwardRef(OverlayComponent);\n}\nexport function createLeafComponent(useElement) {\n  function LeafComponent(props, ref) {\n    const {\n      instance\n    } = useElement(props).current;\n    useImperativeHandle(ref, () => instance);\n    return null;\n  }\n\n  return /*#__PURE__*/forwardRef(LeafComponent);\n}","import { useEffect, useRef } from 'react';\nimport { useLeafletContext } from './context';\nimport { useEventHandlers } from './events';\nimport { useLayerLifecycle } from './layer';\nimport { withPane } from './pane';\nexport function usePathOptions(element, props) {\n  const optionsRef = useRef();\n  useEffect(function updatePathOptions() {\n    if (props.pathOptions !== optionsRef.current) {\n      const options = props.pathOptions ?? {};\n      element.instance.setStyle(options);\n      optionsRef.current = options;\n    }\n  }, [element, props]);\n}\nexport function createPathHook(useElement) {\n  return function usePath(props) {\n    const context = useLeafletContext();\n    const elementRef = useElement(withPane(props, context), context);\n    useEventHandlers(elementRef.current, props.eventHandlers);\n    useLayerLifecycle(elementRef.current, context);\n    usePathOptions(elementRef.current, props);\n    return elementRef;\n  };\n}","import { useEffect, useRef } from 'react';\nexport function createElementHook(createElement, updateElement) {\n  if (updateElement == null) {\n    return function useImmutableLeafletElement(props, context) {\n      return useRef(createElement(props, context));\n    };\n  }\n\n  return function useMutableLeafletElement(props, context) {\n    const elementRef = useRef(createElement(props, context));\n    const propsRef = useRef(props);\n    const {\n      instance\n    } = elementRef.current;\n    useEffect(function updateElementProps() {\n      if (propsRef.current !== props) {\n        updateElement(instance, props, propsRef.current);\n        propsRef.current = props;\n      }\n    }, [instance, props, context]);\n    return elementRef;\n  };\n}","import { useEffect, useRef } from 'react';\nimport { useLeafletContext } from './context';\nexport function createControlHook(useElement) {\n  return function useLeafletControl(props) {\n    const context = useLeafletContext();\n    const elementRef = useElement(props, context);\n    const {\n      instance\n    } = elementRef.current;\n    const positionRef = useRef(props.position);\n    const {\n      position\n    } = props;\n    useEffect(function addControl() {\n      instance.addTo(context.map);\n      return function removeControl() {\n        instance.remove();\n      };\n    }, [context.map, instance]);\n    useEffect(function updateControl() {\n      if (position != null && position !== positionRef.current) {\n        instance.setPosition(position);\n        positionRef.current = position;\n      }\n    }, [instance, position]);\n    return elementRef;\n  };\n}","import { useAttribution } from './attribution';\nimport { useLeafletContext } from './context';\nimport { useEventHandlers } from './events';\nimport { withPane } from './pane';\nexport function createDivOverlayHook(useElement, useLifecycle) {\n  return function useDivOverlay(props, setOpen) {\n    const context = useLeafletContext();\n    const elementRef = useElement(withPane(props, context), context);\n    useAttribution(context.map, props.attribution);\n    useEventHandlers(elementRef.current, props.eventHandlers);\n    useLifecycle(elementRef.current, context, props, setOpen);\n    return elementRef;\n  };\n}","const tileLayer = {\n  attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n  url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n}\n\nexport default tileLayer;","import { createContainerComponent, createDivOverlayComponent, createLeafComponent } from './component';\nimport { createControlHook } from './control';\nimport { createElementHook } from './element';\nimport { createLayerHook } from './layer';\nimport { createDivOverlayHook } from './div-overlay';\nimport { createPathHook } from './path';\nexport function createControlComponent(createInstance) {\n  function createElement(props, context) {\n    return {\n      instance: createInstance(props),\n      context\n    };\n  }\n\n  const useElement = createElementHook(createElement);\n  const useControl = createControlHook(useElement);\n  return createLeafComponent(useControl);\n}\nexport function createLayerComponent(createElement, updateElement) {\n  const useElement = createElementHook(createElement, updateElement);\n  const useLayer = createLayerHook(useElement);\n  return createContainerComponent(useLayer);\n}\nexport function createOverlayComponent(createElement, useLifecycle) {\n  const useElement = createElementHook(createElement);\n  const useOverlay = createDivOverlayHook(useElement, useLifecycle);\n  return createDivOverlayComponent(useOverlay);\n}\nexport function createPathComponent(createElement, updateElement) {\n  const useElement = createElementHook(createElement, updateElement);\n  const usePath = createPathHook(useElement);\n  return createContainerComponent(usePath);\n}\nexport function createTileLayerComponent(createElement, updateElement) {\n  const useElement = createElementHook(createElement, updateElement);\n  const useLayer = createLayerHook(useElement);\n  return createLeafComponent(useLayer);\n}","export function updateGridLayer(layer, props, prevProps) {\n  const {\n    opacity,\n    zIndex\n  } = props;\n\n  if (opacity != null && opacity !== prevProps.opacity) {\n    layer.setOpacity(opacity);\n  }\n\n  if (zIndex != null && zIndex !== prevProps.zIndex) {\n    layer.setZIndex(zIndex);\n  }\n}","import { createTileLayerComponent, updateGridLayer, withPane } from '@react-leaflet/core';\nimport { TileLayer as LeafletTileLayer } from 'leaflet';\nexport const TileLayer = createTileLayerComponent(function createTileLayer(_ref, context) {\n  let {\n    url,\n    ...options\n  } = _ref;\n  return {\n    instance: new LeafletTileLayer(url, withPane(options, context)),\n    context\n  };\n}, updateGridLayer);"],"sourceRoot":""}