{"version":3,"sources":["pages/coordinates-after-clicking-on-the-map.js","../node_modules/@react-leaflet/core/esm/pane.js","../node_modules/@react-leaflet/core/esm/events.js","../node_modules/@react-leaflet/core/esm/layer.js","../node_modules/@react-leaflet/core/esm/attribution.js","../node_modules/@react-leaflet/core/esm/component.js","../node_modules/@react-leaflet/core/esm/path.js","../node_modules/@react-leaflet/core/esm/element.js","../node_modules/@react-leaflet/core/esm/control.js","../node_modules/@react-leaflet/core/esm/div-overlay.js","util/tileLayer.js","../node_modules/@react-leaflet/core/esm/generic.js","../node_modules/@react-leaflet/core/esm/grid-layer.js","../node_modules/react-leaflet/esm/TileLayer.js","../node_modules/react-leaflet/esm/hooks.js"],"names":["center","GetCoordinates","map","useMap","useEffect","info","L","DomUtil","create","positon","Control","extend","options","position","onAdd","textContent","on","e","latlng","addControl","MapWrapper","_jsxs","MapContainer","zoom","scrollWheelZoom","children","_jsx","TileLayer","tileLayer","withPane","props","context","_props$pane","pane","useEventHandlers","element","eventHandlers","eventHandlersRef","useRef","instance","current","off","useLayerLifecycle","_context$layerContain2","layerContainer","addLayer","_context$layerContain","removeLayer","createLayerHook","useElement","useLeafletContext","elementRef","useAttribution","attribution","attributionRef","attributionControl","removeAttribution","addAttribution","createContainerComponent","ContainerComponent","ref","useImperativeHandle","React","createElement","LeafletProvider","value","forwardRef","createDivOverlayComponent","OverlayComponent","isOpen","setOpen","useState","update","contentNode","_contentNode","createPortal","createLeafComponent","LeafComponent","usePathOptions","optionsRef","pathOptions","_props$pathOptions","setStyle","createPathHook","createElementHook","updateElement","propsRef","createControlHook","positionRef","addTo","remove","setPosition","createDivOverlayHook","useLifecycle","url","createControlComponent","createInstance","useControl","createLayerComponent","useLayer","createOverlayComponent","useOverlay","createPathComponent","usePath","createTileLayerComponent","updateGridLayer","layer","prevProps","opacity","zIndex","setOpacity","setZIndex","_ref","LeafletTileLayer","useMapEvent","type","handler"],"mappings":"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","file":"static/js/pages-coordinates-after-clicking-on-the-map-js.5ee1b86f.chunk.js","sourcesContent":["import { useEffect } from 'react';\nimport { MapContainer, useMap, TileLayer, } from 'react-leaflet';\nimport L from 'leaflet';\nimport tileLayer from '../util/tileLayer';\n\nconst center = [52.22977, 21.01178];\n\nconst GetCoordinates = () => {\n  const map = useMap();\n\n  useEffect(() => {\n    if (!map) return;\n    const info = L.DomUtil.create('div', 'legend');\n\n    const positon = L.Control.extend({\n      options: {\n        position: 'bottomleft'\n      },\n\n      onAdd: function () {\n        info.textContent = 'Click on map';\n        return info;\n      }\n    })\n\n    map.on('click', (e) => {\n      info.textContent = e.latlng;\n    })\n\n    map.addControl(new positon());\n\n  }, [map])\n\n\n  return null\n\n}\n\nconst MapWrapper = () => {\n  return (\n    <MapContainer center={center} zoom={18} scrollWheelZoom={false}>\n      <TileLayer {...tileLayer} />\n\n      <GetCoordinates />\n\n    </MapContainer>\n  )\n}\n\nexport default MapWrapper;","export function withPane(props, context) {\n  const pane = props.pane ?? context.pane;\n  return pane ? { ...props,\n    pane\n  } : props;\n}","import { useEffect, useRef } from 'react';\nexport function useEventHandlers(element, eventHandlers) {\n  const eventHandlersRef = useRef();\n  useEffect(function addEventHandlers() {\n    if (eventHandlers != null) {\n      element.instance.on(eventHandlers);\n    }\n\n    eventHandlersRef.current = eventHandlers;\n    return function removeEventHandlers() {\n      if (eventHandlersRef.current != null) {\n        element.instance.off(eventHandlersRef.current);\n      }\n\n      eventHandlersRef.current = null;\n    };\n  }, [element, eventHandlers]);\n}","import { useEffect } from 'react';\nimport { useAttribution } from './attribution';\nimport { useLeafletContext } from './context';\nimport { useEventHandlers } from './events';\nimport { withPane } from './pane';\nexport function useLayerLifecycle(element, context) {\n  useEffect(function addLayer() {\n    const container = context.layerContainer ?? context.map;\n    container.addLayer(element.instance);\n    return function removeLayer() {\n      var _context$layerContain;\n\n      (_context$layerContain = context.layerContainer) == null ? void 0 : _context$layerContain.removeLayer(element.instance);\n      context.map.removeLayer(element.instance);\n    };\n  }, [context, element]);\n}\nexport function createLayerHook(useElement) {\n  return function useLayer(props) {\n    const context = useLeafletContext();\n    const elementRef = useElement(withPane(props, context), context);\n    useAttribution(context.map, props.attribution);\n    useEventHandlers(elementRef.current, props.eventHandlers);\n    useLayerLifecycle(elementRef.current, context);\n    return elementRef;\n  };\n}","import { useEffect, useRef } from 'react';\nexport function useAttribution(map, attribution) {\n  const attributionRef = useRef(attribution);\n  useEffect(function updateAttribution() {\n    if (attribution !== attributionRef.current && map.attributionControl != null) {\n      if (attributionRef.current != null) {\n        map.attributionControl.removeAttribution(attributionRef.current);\n      }\n\n      if (attribution != null) {\n        map.attributionControl.addAttribution(attribution);\n      }\n    }\n\n    attributionRef.current = attribution;\n  }, [map, attribution]);\n}","import React, { forwardRef, useEffect, useImperativeHandle, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { LeafletProvider } from './context';\nexport function createContainerComponent(useElement) {\n  function ContainerComponent(props, ref) {\n    const {\n      instance,\n      context\n    } = useElement(props).current;\n    useImperativeHandle(ref, () => instance);\n    return props.children == null ? null : /*#__PURE__*/React.createElement(LeafletProvider, {\n      value: context\n    }, props.children);\n  }\n\n  return /*#__PURE__*/forwardRef(ContainerComponent);\n}\nexport function createDivOverlayComponent(useElement) {\n  function OverlayComponent(props, ref) {\n    const [isOpen, setOpen] = useState(false);\n    const {\n      instance\n    } = useElement(props, setOpen).current;\n    useImperativeHandle(ref, () => instance);\n    useEffect(function updateOverlay() {\n      if (isOpen) {\n        instance.update();\n      }\n    }, [instance, isOpen, props.children]); // @ts-ignore _contentNode missing in type definition\n\n    const contentNode = instance._contentNode;\n    return contentNode ? /*#__PURE__*/createPortal(props.children, contentNode) : null;\n  }\n\n  return /*#__PURE__*/forwardRef(OverlayComponent);\n}\nexport function createLeafComponent(useElement) {\n  function LeafComponent(props, ref) {\n    const {\n      instance\n    } = useElement(props).current;\n    useImperativeHandle(ref, () => instance);\n    return null;\n  }\n\n  return /*#__PURE__*/forwardRef(LeafComponent);\n}","import { useEffect, useRef } from 'react';\nimport { useLeafletContext } from './context';\nimport { useEventHandlers } from './events';\nimport { useLayerLifecycle } from './layer';\nimport { withPane } from './pane';\nexport function usePathOptions(element, props) {\n  const optionsRef = useRef();\n  useEffect(function updatePathOptions() {\n    if (props.pathOptions !== optionsRef.current) {\n      const options = props.pathOptions ?? {};\n      element.instance.setStyle(options);\n      optionsRef.current = options;\n    }\n  }, [element, props]);\n}\nexport function createPathHook(useElement) {\n  return function usePath(props) {\n    const context = useLeafletContext();\n    const elementRef = useElement(withPane(props, context), context);\n    useEventHandlers(elementRef.current, props.eventHandlers);\n    useLayerLifecycle(elementRef.current, context);\n    usePathOptions(elementRef.current, props);\n    return elementRef;\n  };\n}","import { useEffect, useRef } from 'react';\nexport function createElementHook(createElement, updateElement) {\n  if (updateElement == null) {\n    return function useImmutableLeafletElement(props, context) {\n      return useRef(createElement(props, context));\n    };\n  }\n\n  return function useMutableLeafletElement(props, context) {\n    const elementRef = useRef(createElement(props, context));\n    const propsRef = useRef(props);\n    const {\n      instance\n    } = elementRef.current;\n    useEffect(function updateElementProps() {\n      if (propsRef.current !== props) {\n        updateElement(instance, props, propsRef.current);\n        propsRef.current = props;\n      }\n    }, [instance, props, context]);\n    return elementRef;\n  };\n}","import { useEffect, useRef } from 'react';\nimport { useLeafletContext } from './context';\nexport function createControlHook(useElement) {\n  return function useLeafletControl(props) {\n    const context = useLeafletContext();\n    const elementRef = useElement(props, context);\n    const {\n      instance\n    } = elementRef.current;\n    const positionRef = useRef(props.position);\n    const {\n      position\n    } = props;\n    useEffect(function addControl() {\n      instance.addTo(context.map);\n      return function removeControl() {\n        instance.remove();\n      };\n    }, [context.map, instance]);\n    useEffect(function updateControl() {\n      if (position != null && position !== positionRef.current) {\n        instance.setPosition(position);\n        positionRef.current = position;\n      }\n    }, [instance, position]);\n    return elementRef;\n  };\n}","import { useAttribution } from './attribution';\nimport { useLeafletContext } from './context';\nimport { useEventHandlers } from './events';\nimport { withPane } from './pane';\nexport function createDivOverlayHook(useElement, useLifecycle) {\n  return function useDivOverlay(props, setOpen) {\n    const context = useLeafletContext();\n    const elementRef = useElement(withPane(props, context), context);\n    useAttribution(context.map, props.attribution);\n    useEventHandlers(elementRef.current, props.eventHandlers);\n    useLifecycle(elementRef.current, context, props, setOpen);\n    return elementRef;\n  };\n}","const tileLayer = {\n  attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n  url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n}\n\nexport default tileLayer;","import { createContainerComponent, createDivOverlayComponent, createLeafComponent } from './component';\nimport { createControlHook } from './control';\nimport { createElementHook } from './element';\nimport { createLayerHook } from './layer';\nimport { createDivOverlayHook } from './div-overlay';\nimport { createPathHook } from './path';\nexport function createControlComponent(createInstance) {\n  function createElement(props, context) {\n    return {\n      instance: createInstance(props),\n      context\n    };\n  }\n\n  const useElement = createElementHook(createElement);\n  const useControl = createControlHook(useElement);\n  return createLeafComponent(useControl);\n}\nexport function createLayerComponent(createElement, updateElement) {\n  const useElement = createElementHook(createElement, updateElement);\n  const useLayer = createLayerHook(useElement);\n  return createContainerComponent(useLayer);\n}\nexport function createOverlayComponent(createElement, useLifecycle) {\n  const useElement = createElementHook(createElement);\n  const useOverlay = createDivOverlayHook(useElement, useLifecycle);\n  return createDivOverlayComponent(useOverlay);\n}\nexport function createPathComponent(createElement, updateElement) {\n  const useElement = createElementHook(createElement, updateElement);\n  const usePath = createPathHook(useElement);\n  return createContainerComponent(usePath);\n}\nexport function createTileLayerComponent(createElement, updateElement) {\n  const useElement = createElementHook(createElement, updateElement);\n  const useLayer = createLayerHook(useElement);\n  return createLeafComponent(useLayer);\n}","export function updateGridLayer(layer, props, prevProps) {\n  const {\n    opacity,\n    zIndex\n  } = props;\n\n  if (opacity != null && opacity !== prevProps.opacity) {\n    layer.setOpacity(opacity);\n  }\n\n  if (zIndex != null && zIndex !== prevProps.zIndex) {\n    layer.setZIndex(zIndex);\n  }\n}","import { createTileLayerComponent, updateGridLayer, withPane } from '@react-leaflet/core';\nimport { TileLayer as LeafletTileLayer } from 'leaflet';\nexport const TileLayer = createTileLayerComponent(function createTileLayer(_ref, context) {\n  let {\n    url,\n    ...options\n  } = _ref;\n  return {\n    instance: new LeafletTileLayer(url, withPane(options, context)),\n    context\n  };\n}, updateGridLayer);","import { useLeafletContext } from '@react-leaflet/core';\nimport { useEffect } from 'react';\nexport function useMap() {\n  return useLeafletContext().map;\n}\nexport function useMapEvent(type, handler) {\n  const map = useMap();\n  useEffect(function addMapEventHandler() {\n    // @ts-ignore event type\n    map.on(type, handler);\n    return function removeMapEventHandler() {\n      // @ts-ignore event type\n      map.off(type, handler);\n    };\n  }, [map, type, handler]);\n  return map;\n}\nexport function useMapEvents(handlers) {\n  const map = useMap();\n  useEffect(function addMapEventHandlers() {\n    map.on(handlers);\n    return function removeMapEventHandlers() {\n      map.off(handlers);\n    };\n  }, [map, handlers]);\n  return map;\n}"],"sourceRoot":""}