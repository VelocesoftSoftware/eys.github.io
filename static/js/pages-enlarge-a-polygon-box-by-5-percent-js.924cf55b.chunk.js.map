{"version":3,"sources":["../node_modules/react-leaflet/esm/Polyline.js","pages/enlarge-a-polygon-box-by-5-percent.js","util/tileLayer.js"],"names":["Polyline","createPathComponent","_ref","ctx","positions","options","instance","LeafletPolyline","context","overlayContainer","layer","props","prevProps","setLatLngs","center","poland","MyCountry","map","useMap","newCoordinates","setCoordinates","useState","useEffect","poly","polygon","scalePoly","transformScale","coordinates","geometry","_jsxs","_Fragment","children","_jsx","fill","color","MapWrapper","MapContainer","zoom","scrollWheelZoom","TileLayer","tileLayer","attribution","url"],"mappings":"yIAAA,sDAEO,MAAMA,EAAWC,aAAoB,SAAwBC,EAAMC,GACxE,IAAI,UACFC,KACGC,GACDH,EACJ,MAAMI,EAAW,IAAIC,WAAgBH,EAAWC,GAChD,MAAO,CACLC,WACAE,QAAS,IAAKL,EACZM,iBAAkBH,GAGxB,IAAG,SAAwBI,EAAOC,EAAOC,GACnCD,EAAMP,YAAcQ,EAAUR,WAChCM,EAAMG,WAAWF,EAAMP,UAE3B,G,kCClBA,4EAKA,MAAMU,EAAS,CAAC,SAAU,UAEpBC,EAAS,CACb,CAAC,kBAAmB,oBACpB,CAAC,kBAAmB,oBACpB,CAAC,mBAAoB,oBACrB,CAAC,kBAAmB,oBACpB,CAAC,kBAAmB,oBACpB,CAAC,mBAAoB,oBACrB,CAAC,kBAAmB,iBACpB,CAAC,kBAAmB,oBACpB,CAAC,kBAAmB,oBACpB,CAAC,kBAAmB,qBAGhBC,EAAYA,KAChB,MAAMC,EAAMC,eACLC,EAAgBC,GAAkBC,mBAAS,MAclD,OAZAC,qBAAU,KACR,IAAKL,EAAK,OAEV,MAAMM,EAAOC,kBAAQ,CAACT,IAChBU,EAAYC,yBAAeH,EAAM,OAEjC,YAAEI,GAAgBF,EAAUG,SAElCR,EAAeO,EAAY,GAE1B,CAACV,IAEGE,EAEHU,eAAAC,WAAA,CAAAC,SAAA,CACEC,cAAChC,IAAQ,CAACI,UAAWW,EAAQkB,KAAM,MAAOC,MAAO,QACjDF,cAAChC,IAAQ,CAACI,UAAWe,EAAgBc,KAAM,QAASC,MAAO,aAG7D,IAAI,EAkBKC,UAdIA,IAEfN,eAACO,IAAY,CACXtB,OAAQA,EAAQuB,KAAM,EACtBC,iBAAiB,EAAMP,SAAA,CAEvBC,cAACO,IAAS,IAAKC,MAEfR,cAAChB,EAAS,M,kCClDDwB,IALG,CAChBC,YAAa,2EACbC,IAAK,qD","file":"static/js/pages-enlarge-a-polygon-box-by-5-percent-js.924cf55b.chunk.js","sourcesContent":["import { createPathComponent } from '@react-leaflet/core';\nimport { Polyline as LeafletPolyline } from 'leaflet';\nexport const Polyline = createPathComponent(function createPolyline(_ref, ctx) {\n  let {\n    positions,\n    ...options\n  } = _ref;\n  const instance = new LeafletPolyline(positions, options);\n  return {\n    instance,\n    context: { ...ctx,\n      overlayContainer: instance\n    }\n  };\n}, function updatePolyline(layer, props, prevProps) {\n  if (props.positions !== prevProps.positions) {\n    layer.setLatLngs(props.positions);\n  }\n});","import { useEffect, useState } from 'react';\nimport { MapContainer, useMap, TileLayer, Polyline } from 'react-leaflet';\nimport { polygon, transformScale } from '@turf/turf';\nimport tileLayer from '../util/tileLayer';\n\nconst center = [52.22977, 19.01178];\n\nconst poland = [\n  [54.80068486732236, 18.292236328125004],\n  [53.89786522246521, 14.611816406250002],\n  [51.055207338584964, 15.281982421875002],\n  [49.57510247172322, 19.138183593750004],\n  [50.57626025689928, 23.642578125000004],\n  [52.214338608258224, 23.148193359375004],\n  [52.86912972768522, 23.741455078125],\n  [54.29729354239267, 22.928466796875004],\n  [54.29729354239267, 19.489746093750004],\n  [54.80068486732236, 18.292236328125004]\n];\n\nconst MyCountry = () => {\n  const map = useMap();\n  const [newCoordinates, setCoordinates] = useState(null)\n\n  useEffect(() => {\n    if (!map) return\n\n    const poly = polygon([poland]);\n    const scalePoly = transformScale(poly, 1.05)\n\n    const { coordinates } = scalePoly.geometry;\n\n    setCoordinates(coordinates);\n\n  }, [map])\n\n  return newCoordinates\n    ? (\n      <>\n        <Polyline positions={poland} fill={'red'} color={'red'} />\n        <Polyline positions={newCoordinates} fill={'white'} color={'white'} />\n      </>\n    )\n    : null\n\n}\n\nconst MapWrapper = () => {\n  return (\n    <MapContainer\n      center={center} zoom={6}\n      scrollWheelZoom={false}\n    >\n      <TileLayer {...tileLayer} />\n\n      <MyCountry />\n\n    </MapContainer>\n  )\n}\n\nexport default MapWrapper;","const tileLayer = {\n  attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n  url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n}\n\nexport default tileLayer;"],"sourceRoot":""}