{"version":3,"sources":["../node_modules/react-leaflet/esm/ImageOverlay.js","pages/image-instead-of-map.js","../node_modules/@react-leaflet/core/esm/pane.js","../node_modules/@react-leaflet/core/esm/events.js","../node_modules/@react-leaflet/core/esm/layer.js","../node_modules/@react-leaflet/core/esm/attribution.js","../node_modules/@react-leaflet/core/esm/component.js","../node_modules/@react-leaflet/core/esm/path.js","../node_modules/@react-leaflet/core/esm/element.js","../node_modules/@react-leaflet/core/esm/control.js","../node_modules/@react-leaflet/core/esm/div-overlay.js","../node_modules/@react-leaflet/core/esm/generic.js","../node_modules/react-leaflet/esm/hooks.js","../node_modules/@react-leaflet/core/esm/media-overlay.js"],"names":["ImageOverlay","createLayerComponent","_ref","ctx","bounds","url","options","instance","LeafletImageOverlay","context","overlayContainer","overlay","props","prevProps","updateMediaOverlay","setUrl","imageBounds","OverlayImage","useMap","fitBounds","_jsx","transparent","MapWrapper","MapContainer","crs","CRS","Simple","maxZoom","minZoom","scrollWheelZoom","children","withPane","_props$pane","pane","useEventHandlers","element","eventHandlers","eventHandlersRef","useRef","useEffect","on","current","off","useLayerLifecycle","_context$layerContain2","layerContainer","map","addLayer","_context$layerContain","removeLayer","createLayerHook","useElement","useLeafletContext","elementRef","useAttribution","attribution","attributionRef","attributionControl","removeAttribution","addAttribution","createContainerComponent","ContainerComponent","ref","useImperativeHandle","React","createElement","LeafletProvider","value","forwardRef","createDivOverlayComponent","OverlayComponent","isOpen","setOpen","useState","update","contentNode","_contentNode","createPortal","createLeafComponent","LeafComponent","usePathOptions","optionsRef","pathOptions","_props$pathOptions","setStyle","createPathHook","createElementHook","updateElement","propsRef","createControlHook","positionRef","position","addTo","remove","setPosition","createDivOverlayHook","useLifecycle","createControlComponent","createInstance","useControl","useLayer","createOverlayComponent","useOverlay","createPathComponent","usePath","createTileLayerComponent","useMapEvent","type","handler","LatLngBounds","setBounds","opacity","setOpacity","zIndex","setZIndex"],"mappings":"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","file":"static/js/pages-image-instead-of-map-js.dc3a06e1.chunk.js","sourcesContent":["import { createLayerComponent, updateMediaOverlay } from '@react-leaflet/core';\nimport { ImageOverlay as LeafletImageOverlay } from 'leaflet';\nexport const ImageOverlay = createLayerComponent(function createImageOveraly(_ref, ctx) {\n  let {\n    bounds,\n    url,\n    ...options\n  } = _ref;\n  const instance = new LeafletImageOverlay(url, bounds, options);\n  return {\n    instance,\n    context: { ...ctx,\n      overlayContainer: instance\n    }\n  };\n}, function updateImageOverlay(overlay, props, prevProps) {\n  updateMediaOverlay(overlay, props, prevProps);\n\n  if (props.url !== prevProps.url) {\n    overlay.setUrl(props.url);\n  }\n});","import { CRS } from 'leaflet';\nimport { MapContainer, ImageOverlay, useMap } from 'react-leaflet';\n\nlet imageBounds = [\n  [50, 50], // padding\n  [847, 1280], // image dimensions\n];\n\nconst OverlayImage = () => {\n  const map = useMap();\n\n  map.fitBounds(imageBounds);\n\n  return (\n    <ImageOverlay\n      bounds={imageBounds}\n      url={'https://tomickigrzegorz.github.io/leaflet-examples/static/factory_UML.png'}\n      transparent={true}\n    />\n  );\n}\n\nconst MapWrapper = () => {\n  return (\n    <MapContainer\n      crs={CRS.Simple}\n      maxZoom={1}\n      minZoom={-4}\n      scrollWheelZoom={false}>\n\n      <OverlayImage />\n\n    </MapContainer>\n  )\n}\n\nexport default MapWrapper;\n","export function withPane(props, context) {\n  const pane = props.pane ?? context.pane;\n  return pane ? { ...props,\n    pane\n  } : props;\n}","import { useEffect, useRef } from 'react';\nexport function useEventHandlers(element, eventHandlers) {\n  const eventHandlersRef = useRef();\n  useEffect(function addEventHandlers() {\n    if (eventHandlers != null) {\n      element.instance.on(eventHandlers);\n    }\n\n    eventHandlersRef.current = eventHandlers;\n    return function removeEventHandlers() {\n      if (eventHandlersRef.current != null) {\n        element.instance.off(eventHandlersRef.current);\n      }\n\n      eventHandlersRef.current = null;\n    };\n  }, [element, eventHandlers]);\n}","import { useEffect } from 'react';\nimport { useAttribution } from './attribution';\nimport { useLeafletContext } from './context';\nimport { useEventHandlers } from './events';\nimport { withPane } from './pane';\nexport function useLayerLifecycle(element, context) {\n  useEffect(function addLayer() {\n    const container = context.layerContainer ?? context.map;\n    container.addLayer(element.instance);\n    return function removeLayer() {\n      var _context$layerContain;\n\n      (_context$layerContain = context.layerContainer) == null ? void 0 : _context$layerContain.removeLayer(element.instance);\n      context.map.removeLayer(element.instance);\n    };\n  }, [context, element]);\n}\nexport function createLayerHook(useElement) {\n  return function useLayer(props) {\n    const context = useLeafletContext();\n    const elementRef = useElement(withPane(props, context), context);\n    useAttribution(context.map, props.attribution);\n    useEventHandlers(elementRef.current, props.eventHandlers);\n    useLayerLifecycle(elementRef.current, context);\n    return elementRef;\n  };\n}","import { useEffect, useRef } from 'react';\nexport function useAttribution(map, attribution) {\n  const attributionRef = useRef(attribution);\n  useEffect(function updateAttribution() {\n    if (attribution !== attributionRef.current && map.attributionControl != null) {\n      if (attributionRef.current != null) {\n        map.attributionControl.removeAttribution(attributionRef.current);\n      }\n\n      if (attribution != null) {\n        map.attributionControl.addAttribution(attribution);\n      }\n    }\n\n    attributionRef.current = attribution;\n  }, [map, attribution]);\n}","import React, { forwardRef, useEffect, useImperativeHandle, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { LeafletProvider } from './context';\nexport function createContainerComponent(useElement) {\n  function ContainerComponent(props, ref) {\n    const {\n      instance,\n      context\n    } = useElement(props).current;\n    useImperativeHandle(ref, () => instance);\n    return props.children == null ? null : /*#__PURE__*/React.createElement(LeafletProvider, {\n      value: context\n    }, props.children);\n  }\n\n  return /*#__PURE__*/forwardRef(ContainerComponent);\n}\nexport function createDivOverlayComponent(useElement) {\n  function OverlayComponent(props, ref) {\n    const [isOpen, setOpen] = useState(false);\n    const {\n      instance\n    } = useElement(props, setOpen).current;\n    useImperativeHandle(ref, () => instance);\n    useEffect(function updateOverlay() {\n      if (isOpen) {\n        instance.update();\n      }\n    }, [instance, isOpen, props.children]); // @ts-ignore _contentNode missing in type definition\n\n    const contentNode = instance._contentNode;\n    return contentNode ? /*#__PURE__*/createPortal(props.children, contentNode) : null;\n  }\n\n  return /*#__PURE__*/forwardRef(OverlayComponent);\n}\nexport function createLeafComponent(useElement) {\n  function LeafComponent(props, ref) {\n    const {\n      instance\n    } = useElement(props).current;\n    useImperativeHandle(ref, () => instance);\n    return null;\n  }\n\n  return /*#__PURE__*/forwardRef(LeafComponent);\n}","import { useEffect, useRef } from 'react';\nimport { useLeafletContext } from './context';\nimport { useEventHandlers } from './events';\nimport { useLayerLifecycle } from './layer';\nimport { withPane } from './pane';\nexport function usePathOptions(element, props) {\n  const optionsRef = useRef();\n  useEffect(function updatePathOptions() {\n    if (props.pathOptions !== optionsRef.current) {\n      const options = props.pathOptions ?? {};\n      element.instance.setStyle(options);\n      optionsRef.current = options;\n    }\n  }, [element, props]);\n}\nexport function createPathHook(useElement) {\n  return function usePath(props) {\n    const context = useLeafletContext();\n    const elementRef = useElement(withPane(props, context), context);\n    useEventHandlers(elementRef.current, props.eventHandlers);\n    useLayerLifecycle(elementRef.current, context);\n    usePathOptions(elementRef.current, props);\n    return elementRef;\n  };\n}","import { useEffect, useRef } from 'react';\nexport function createElementHook(createElement, updateElement) {\n  if (updateElement == null) {\n    return function useImmutableLeafletElement(props, context) {\n      return useRef(createElement(props, context));\n    };\n  }\n\n  return function useMutableLeafletElement(props, context) {\n    const elementRef = useRef(createElement(props, context));\n    const propsRef = useRef(props);\n    const {\n      instance\n    } = elementRef.current;\n    useEffect(function updateElementProps() {\n      if (propsRef.current !== props) {\n        updateElement(instance, props, propsRef.current);\n        propsRef.current = props;\n      }\n    }, [instance, props, context]);\n    return elementRef;\n  };\n}","import { useEffect, useRef } from 'react';\nimport { useLeafletContext } from './context';\nexport function createControlHook(useElement) {\n  return function useLeafletControl(props) {\n    const context = useLeafletContext();\n    const elementRef = useElement(props, context);\n    const {\n      instance\n    } = elementRef.current;\n    const positionRef = useRef(props.position);\n    const {\n      position\n    } = props;\n    useEffect(function addControl() {\n      instance.addTo(context.map);\n      return function removeControl() {\n        instance.remove();\n      };\n    }, [context.map, instance]);\n    useEffect(function updateControl() {\n      if (position != null && position !== positionRef.current) {\n        instance.setPosition(position);\n        positionRef.current = position;\n      }\n    }, [instance, position]);\n    return elementRef;\n  };\n}","import { useAttribution } from './attribution';\nimport { useLeafletContext } from './context';\nimport { useEventHandlers } from './events';\nimport { withPane } from './pane';\nexport function createDivOverlayHook(useElement, useLifecycle) {\n  return function useDivOverlay(props, setOpen) {\n    const context = useLeafletContext();\n    const elementRef = useElement(withPane(props, context), context);\n    useAttribution(context.map, props.attribution);\n    useEventHandlers(elementRef.current, props.eventHandlers);\n    useLifecycle(elementRef.current, context, props, setOpen);\n    return elementRef;\n  };\n}","import { createContainerComponent, createDivOverlayComponent, createLeafComponent } from './component';\nimport { createControlHook } from './control';\nimport { createElementHook } from './element';\nimport { createLayerHook } from './layer';\nimport { createDivOverlayHook } from './div-overlay';\nimport { createPathHook } from './path';\nexport function createControlComponent(createInstance) {\n  function createElement(props, context) {\n    return {\n      instance: createInstance(props),\n      context\n    };\n  }\n\n  const useElement = createElementHook(createElement);\n  const useControl = createControlHook(useElement);\n  return createLeafComponent(useControl);\n}\nexport function createLayerComponent(createElement, updateElement) {\n  const useElement = createElementHook(createElement, updateElement);\n  const useLayer = createLayerHook(useElement);\n  return createContainerComponent(useLayer);\n}\nexport function createOverlayComponent(createElement, useLifecycle) {\n  const useElement = createElementHook(createElement);\n  const useOverlay = createDivOverlayHook(useElement, useLifecycle);\n  return createDivOverlayComponent(useOverlay);\n}\nexport function createPathComponent(createElement, updateElement) {\n  const useElement = createElementHook(createElement, updateElement);\n  const usePath = createPathHook(useElement);\n  return createContainerComponent(usePath);\n}\nexport function createTileLayerComponent(createElement, updateElement) {\n  const useElement = createElementHook(createElement, updateElement);\n  const useLayer = createLayerHook(useElement);\n  return createLeafComponent(useLayer);\n}","import { useLeafletContext } from '@react-leaflet/core';\nimport { useEffect } from 'react';\nexport function useMap() {\n  return useLeafletContext().map;\n}\nexport function useMapEvent(type, handler) {\n  const map = useMap();\n  useEffect(function addMapEventHandler() {\n    // @ts-ignore event type\n    map.on(type, handler);\n    return function removeMapEventHandler() {\n      // @ts-ignore event type\n      map.off(type, handler);\n    };\n  }, [map, type, handler]);\n  return map;\n}\nexport function useMapEvents(handlers) {\n  const map = useMap();\n  useEffect(function addMapEventHandlers() {\n    map.on(handlers);\n    return function removeMapEventHandlers() {\n      map.off(handlers);\n    };\n  }, [map, handlers]);\n  return map;\n}","import { LatLngBounds } from 'leaflet';\nexport function updateMediaOverlay(overlay, props, prevProps) {\n  if (props.bounds instanceof LatLngBounds && props.bounds !== prevProps.bounds) {\n    overlay.setBounds(props.bounds);\n  }\n\n  if (props.opacity != null && props.opacity !== prevProps.opacity) {\n    overlay.setOpacity(props.opacity);\n  }\n\n  if (props.zIndex != null && props.zIndex !== prevProps.zIndex) {\n    // @ts-ignore missing in definition but inherited from ImageOverlay\n    overlay.setZIndex(props.zIndex);\n  }\n}"],"sourceRoot":""}