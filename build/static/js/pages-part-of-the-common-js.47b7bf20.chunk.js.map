{"version":3,"sources":["../node_modules/react-leaflet/esm/GeoJSON.js","pages/part-of-the-common.js","util/tileLayer.js"],"names":["GeoJSON","createPathComponent","_ref","ctx","data","options","instance","LeafletGeoJSON","context","overlayContainer","layer","props","prevProps","style","resetStyle","setStyle","center","centers","lat","lng","steps","units","intersectionColor","color","weight","opacity","fillColor","fillOpacity","Intersection","map","useMap","polygons","setPolygons","useState","useEffect","polygon","circle","pol","length","_jsxs","_Fragment","children","_jsx","intersect","MapWrapper","MapContainer","zoom","TileLayer","tileLayer","attribution","url"],"mappings":"yIAAA,sDAEO,MAAMA,EAAUC,aAAoB,SAAuBC,EAAMC,GACtE,IAAI,KACFC,KACGC,GACDH,EACJ,MAAMI,EAAW,IAAIC,UAAeH,EAAMC,GAC1C,MAAO,CACLC,WACAE,QAAS,IAAKL,EACZM,iBAAkBH,GAGxB,IAAG,SAAuBI,EAAOC,EAAOC,GAClCD,EAAME,QAAUD,EAAUC,QACT,MAAfF,EAAME,MACRH,EAAMI,aAENJ,EAAMK,SAASJ,EAAME,OAG3B,G,kCCtBA,4EAKA,MAAMG,EAAS,CAAC,SAAU,UAEpBC,EAAU,CACd,CAAEC,IAAK,kBAAmBC,IAAK,mBAC/B,CAAED,IAAK,kBAAmBC,IAAK,oBAC/B,CAAED,IAAK,iBAAkBC,IAAK,qBAG1Bd,EAAU,CACde,MAAO,GACPC,MAAO,SACPhB,QAAS,CAAC,GAGNiB,EAAoB,CACxBC,MAAO,SACPC,OAAQ,EACRC,QAAS,EACTC,UAAW,SACXC,YAAa,IAKTC,EAAeA,KACnB,MAAMC,EAAMC,eACLC,EAAUC,GAAeC,mBAAS,IAYzC,OAVAC,qBAAU,KAERjB,EAAQY,KAAI3B,IAAmB,IAAlB,IAAEgB,EAAG,IAAEC,GAAKjB,EACvB,MAAMiC,EAAUC,iBAAO,CAACjB,EAAKD,GATpB,GASkCb,GAE3C,OAAO2B,GAAYK,GAAO,IAAIA,EAAKF,IAAS,GAC5C,GAED,CAACN,IAEGE,EAASO,OAAS,EAErBC,eAAAC,WAAA,CAAAC,SAAA,CACEC,cAAC1C,IAAO,CAACI,KAAM2B,EAAUR,MAAO,MAAOC,OAAQ,IAC/CkB,cAAC1C,IAAO,CAACI,KAAMuC,uBAAaZ,GAAWlB,MAAOS,OAGhD,IAAI,EAgBKsB,UAZIA,IAEfL,eAACM,IAAY,CAAC7B,OAAQA,EAAQ8B,KAAM,GAAGL,SAAA,CAErCC,cAACK,IAAS,IAAKC,MAEfN,cAACd,EAAY,M,kCCvDJoB,IALG,CAChBC,YAAa,2EACbC,IAAK,qD","file":"static/js/pages-part-of-the-common-js.47b7bf20.chunk.js","sourcesContent":["import { createPathComponent } from '@react-leaflet/core';\nimport { GeoJSON as LeafletGeoJSON } from 'leaflet';\nexport const GeoJSON = createPathComponent(function createGeoJSON(_ref, ctx) {\n  let {\n    data,\n    ...options\n  } = _ref;\n  const instance = new LeafletGeoJSON(data, options);\n  return {\n    instance,\n    context: { ...ctx,\n      overlayContainer: instance\n    }\n  };\n}, function updateGeoJSON(layer, props, prevProps) {\n  if (props.style !== prevProps.style) {\n    if (props.style == null) {\n      layer.resetStyle();\n    } else {\n      layer.setStyle(props.style);\n    }\n  }\n});","import { useState, useEffect } from 'react';\nimport { useMap, MapContainer, TileLayer, GeoJSON } from 'react-leaflet';\nimport { circle, intersect } from '@turf/turf';\nimport tileLayer from '../util/tileLayer';\n\nconst center = [52.22977, 21.01178];\n\nconst centers = [\n  { lat: 52.22990558765487, lng: 21.01168513298035 },\n  { lat: 52.22962958994604, lng: 21.011593937873844 },\n  { lat: 52.2297445891999, lng: 21.012012362480167 }\n]\n\nconst options = {\n  steps: 64,\n  units: 'meters',\n  options: {}\n}\n\nconst intersectionColor = {\n  color: \"yellow\",\n  weight: 2,\n  opacity: 1,\n  fillColor: \"yellow\",\n  fillOpacity: 0.7\n};\n\nconst radius = 30;\n\nconst Intersection = () => {\n  const map = useMap();\n  const [polygons, setPolygons] = useState([])\n\n  useEffect(() => {\n\n    centers.map(({ lat, lng }) => {\n      const polygon = circle([lng, lat], radius, options);\n\n      return setPolygons(pol => [...pol, polygon]);\n    })\n\n  }, [map])\n\n  return polygons.length > 0\n    ? (\n      <>\n        <GeoJSON data={polygons} color={'red'} weight={2} />\n        <GeoJSON data={intersect(...polygons)} style={intersectionColor} />\n      </>\n    )\n    : null\n}\n\n\nconst MapWrapper = () => {\n  return (\n    <MapContainer center={center} zoom={18}>\n\n      <TileLayer {...tileLayer} />\n\n      <Intersection />\n\n    </MapContainer>\n  )\n}\n\nexport default MapWrapper;","const tileLayer = {\n  attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n  url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n}\n\nexport default tileLayer;"],"sourceRoot":""}