{"version":3,"sources":["../node_modules/react-leaflet/esm/GeoJSON.js","../node_modules/@react-leaflet/core/esm/pane.js","../node_modules/@react-leaflet/core/esm/events.js","../node_modules/@react-leaflet/core/esm/layer.js","../node_modules/@react-leaflet/core/esm/attribution.js","../node_modules/@react-leaflet/core/esm/component.js","../node_modules/@react-leaflet/core/esm/path.js","../node_modules/@react-leaflet/core/esm/element.js","../node_modules/@react-leaflet/core/esm/control.js","../node_modules/@react-leaflet/core/esm/div-overlay.js","util/tileLayer.js","../node_modules/@react-leaflet/core/esm/generic.js","../node_modules/@react-leaflet/core/esm/grid-layer.js","../node_modules/react-leaflet/esm/TileLayer.js"],"names":["GeoJSON","createPathComponent","_ref","ctx","data","options","instance","LeafletGeoJSON","context","overlayContainer","layer","props","prevProps","style","resetStyle","setStyle","withPane","_props$pane","pane","useEventHandlers","element","eventHandlers","eventHandlersRef","useRef","useEffect","on","current","off","useLayerLifecycle","_context$layerContain2","layerContainer","map","addLayer","_context$layerContain","removeLayer","createLayerHook","useElement","useLeafletContext","elementRef","useAttribution","attribution","attributionRef","attributionControl","removeAttribution","addAttribution","createContainerComponent","ContainerComponent","ref","useImperativeHandle","children","React","createElement","LeafletProvider","value","forwardRef","createDivOverlayComponent","OverlayComponent","isOpen","setOpen","useState","update","contentNode","_contentNode","createPortal","createLeafComponent","LeafComponent","usePathOptions","optionsRef","pathOptions","_props$pathOptions","createPathHook","createElementHook","updateElement","propsRef","createControlHook","positionRef","position","addTo","remove","setPosition","createDivOverlayHook","useLifecycle","tileLayer","url","createControlComponent","createInstance","useControl","createLayerComponent","useLayer","createOverlayComponent","useOverlay","usePath","createTileLayerComponent","updateGridLayer","opacity","zIndex","setOpacity","setZIndex","TileLayer","LeafletTileLayer"],"mappings":"mugJAAA,sDAEO,MAAMA,EAAUC,aAAoB,SAAuBC,EAAMC,GACtE,IAAI,KACFC,KACGC,GACDH,EACJ,MAAMI,EAAW,IAAIC,UAAeH,EAAMC,GAC1C,MAAO,CACLC,WACAE,QAAS,IAAKL,EACZM,iBAAkBH,GAGxB,IAAG,SAAuBI,EAAOC,EAAOC,GAClCD,EAAME,QAAUD,EAAUC,QACT,MAAfF,EAAME,MACRH,EAAMI,aAENJ,EAAMK,SAASJ,EAAME,OAG3B,G,kCCtBO,SAASG,EAASL,EAAOH,GAAS,IAAAS,EACvC,MAAMC,EAAiB,QAAbD,EAAGN,EAAMO,YAAI,IAAAD,IAAIT,EAAQU,KACnC,OAAOA,EAAO,IAAKP,EACjBO,QACEP,CACN,CALA,iC,kCCAA,6CACO,SAASQ,EAAiBC,EAASC,GACxC,MAAMC,EAAmBC,mBACzBC,qBAAU,WAMR,OALqB,MAAjBH,GACFD,EAAQd,SAASmB,GAAGJ,GAGtBC,EAAiBI,QAAUL,EACpB,WAC2B,MAA5BC,EAAiBI,SACnBN,EAAQd,SAASqB,IAAIL,EAAiBI,SAGxCJ,EAAiBI,QAAU,IAC7B,CACF,GAAG,CAACN,EAASC,GACf,C,kCCjBA,+GAKO,SAASO,EAAkBR,EAASZ,GACzCgB,qBAAU,WAAoB,IAAAK,EAG5B,OAFwC,QAAzBA,EAAGrB,EAAQsB,sBAAc,IAAAD,IAAIrB,EAAQuB,KAC1CC,SAASZ,EAAQd,UACpB,WACL,IAAI2B,EAEgD,OAAnDA,EAAwBzB,EAAQsB,iBAAmCG,EAAsBC,YAAYd,EAAQd,UAC9GE,EAAQuB,IAAIG,YAAYd,EAAQd,SAClC,CACF,GAAG,CAACE,EAASY,GACf,CACO,SAASe,EAAgBC,GAC9B,OAAO,SAAkBzB,GACvB,MAAMH,EAAU6B,cACVC,EAAaF,EAAWpB,YAASL,EAAOH,GAAUA,GAIxD,OAHA+B,YAAe/B,EAAQuB,IAAKpB,EAAM6B,aAClCrB,YAAiBmB,EAAWZ,QAASf,EAAMU,eAC3CO,EAAkBU,EAAWZ,QAASlB,GAC/B8B,CACT,CACF,C,kCC1BA,6CACO,SAASC,EAAeR,EAAKS,GAClC,MAAMC,EAAiBlB,iBAAOiB,GAC9BhB,qBAAU,WACJgB,IAAgBC,EAAef,SAAqC,MAA1BK,EAAIW,qBAClB,MAA1BD,EAAef,SACjBK,EAAIW,mBAAmBC,kBAAkBF,EAAef,SAGvC,MAAfc,GACFT,EAAIW,mBAAmBE,eAAeJ,IAI1CC,EAAef,QAAUc,CAC3B,GAAG,CAACT,EAAKS,GACX,C,kCChBA,0IAGO,SAASK,EAAyBT,GACvC,SAASU,EAAmBnC,EAAOoC,GACjC,MAAM,SACJzC,EAAQ,QACRE,GACE4B,EAAWzB,GAAOe,QAEtB,OADAsB,8BAAoBD,GAAK,IAAMzC,IACN,MAAlBK,EAAMsC,SAAmB,KAAoBC,IAAMC,cAAcC,IAAiB,CACvFC,MAAO7C,GACNG,EAAMsC,SACX,CAEA,OAAoBK,qBAAWR,EACjC,CACO,SAASS,EAA0BnB,GACxC,SAASoB,EAAiB7C,EAAOoC,GAC/B,MAAOU,EAAQC,GAAWC,oBAAS,IAC7B,SACJrD,GACE8B,EAAWzB,EAAO+C,GAAShC,QAC/BsB,8BAAoBD,GAAK,IAAMzC,IAC/BkB,qBAAU,WACJiC,GACFnD,EAASsD,QAEb,GAAG,CAACtD,EAAUmD,EAAQ9C,EAAMsC,WAE5B,MAAMY,EAAcvD,EAASwD,aAC7B,OAAOD,EAA2BE,uBAAapD,EAAMsC,SAAUY,GAAe,IAChF,CAEA,OAAoBP,qBAAWE,EACjC,CACO,SAASQ,EAAoB5B,GAClC,SAAS6B,EAActD,EAAOoC,GAC5B,MAAM,SACJzC,GACE8B,EAAWzB,GAAOe,QAEtB,OADAsB,8BAAoBD,GAAK,IAAMzC,IACxB,IACT,CAEA,OAAoBgD,qBAAWW,EACjC,C,kCC9CA,+GAKO,SAASC,EAAe9C,EAAST,GACtC,MAAMwD,EAAa5C,mBACnBC,qBAAU,WACR,GAAIb,EAAMyD,cAAgBD,EAAWzC,QAAS,KAAA2C,EAC5C,MAAMhE,EAA2B,QAApBgE,EAAG1D,EAAMyD,mBAAW,IAAAC,IAAI,CAAC,EACtCjD,EAAQd,SAASS,SAASV,GAC1B8D,EAAWzC,QAAUrB,CACvB,CACF,GAAG,CAACe,EAAST,GACf,CACO,SAAS2D,EAAelC,GAC7B,OAAO,SAAiBzB,GACtB,MAAMH,EAAU6B,cACVC,EAAaF,EAAWpB,YAASL,EAAOH,GAAUA,GAIxD,OAHAW,YAAiBmB,EAAWZ,QAASf,EAAMU,eAC3CO,YAAkBU,EAAWZ,QAASlB,GACtC0D,EAAe5B,EAAWZ,QAASf,GAC5B2B,CACT,CACF,C,kCCxBA,6CACO,SAASiC,EAAkBpB,EAAeqB,GAC/C,OAAqB,MAAjBA,EACK,SAAoC7D,EAAOH,GAChD,OAAOe,iBAAO4B,EAAcxC,EAAOH,GACrC,EAGK,SAAkCG,EAAOH,GAC9C,MAAM8B,EAAaf,iBAAO4B,EAAcxC,EAAOH,IACzCiE,EAAWlD,iBAAOZ,IAClB,SACJL,GACEgC,EAAWZ,QAOf,OANAF,qBAAU,WACJiD,EAAS/C,UAAYf,IACvB6D,EAAclE,EAAUK,EAAO8D,EAAS/C,SACxC+C,EAAS/C,QAAUf,EAEvB,GAAG,CAACL,EAAUK,EAAOH,IACd8B,CACT,CACF,C,kCCtBA,qDAEO,SAASoC,EAAkBtC,GAChC,OAAO,SAA2BzB,GAChC,MAAMH,EAAU6B,cACVC,EAAaF,EAAWzB,EAAOH,IAC/B,SACJF,GACEgC,EAAWZ,QACTiD,EAAcpD,iBAAOZ,EAAMiE,WAC3B,SACJA,GACEjE,EAaJ,OAZAa,qBAAU,WAER,OADAlB,EAASuE,MAAMrE,EAAQuB,KAChB,WACLzB,EAASwE,QACX,CACF,GAAG,CAACtE,EAAQuB,IAAKzB,IACjBkB,qBAAU,WACQ,MAAZoD,GAAoBA,IAAaD,EAAYjD,UAC/CpB,EAASyE,YAAYH,GACrBD,EAAYjD,QAAUkD,EAE1B,GAAG,CAACtE,EAAUsE,IACPtC,CACT,CACF,C,kCC3BA,sEAIO,SAAS0C,EAAqB5C,EAAY6C,GAC/C,OAAO,SAAuBtE,EAAO+C,GACnC,MAAMlD,EAAU6B,cACVC,EAAaF,EAAWpB,YAASL,EAAOH,GAAUA,GAIxD,OAHA+B,YAAe/B,EAAQuB,IAAKpB,EAAM6B,aAClCrB,YAAiBmB,EAAWZ,QAASf,EAAMU,eAC3C4D,EAAa3C,EAAWZ,QAASlB,EAASG,EAAO+C,GAC1CpB,CACT,CACF,C,kCCRe4C,IALG,CAChB1C,YAAa,2EACb2C,IAAK,qD,kCCFP,8NAMO,SAASC,EAAuBC,GAQrC,MAAMjD,EAAamC,aAPnB,SAAuB5D,EAAOH,GAC5B,MAAO,CACLF,SAAU+E,EAAe1E,GACzBH,UAEJ,IAGM8E,EAAaZ,YAAkBtC,GACrC,OAAO4B,YAAoBsB,EAC7B,CACO,SAASC,EAAqBpC,EAAeqB,GAClD,MAAMpC,EAAamC,YAAkBpB,EAAeqB,GAC9CgB,EAAWrD,YAAgBC,GACjC,OAAOS,YAAyB2C,EAClC,CACO,SAASC,EAAuBtC,EAAe8B,GACpD,MAAM7C,EAAamC,YAAkBpB,GAC/BuC,EAAaV,YAAqB5C,EAAY6C,GACpD,OAAO1B,YAA0BmC,EACnC,CACO,SAASzF,EAAoBkD,EAAeqB,GACjD,MAAMpC,EAAamC,YAAkBpB,EAAeqB,GAC9CmB,EAAUrB,YAAelC,GAC/B,OAAOS,YAAyB8C,EAClC,CACO,SAASC,EAAyBzC,EAAeqB,GACtD,MAAMpC,EAAamC,YAAkBpB,EAAeqB,GAC9CgB,EAAWrD,YAAgBC,GACjC,OAAO4B,YAAoBwB,EAC7B,C,kCCrCO,SAASK,EAAgBnF,EAAOC,EAAOC,GAC5C,MAAM,QACJkF,EAAO,OACPC,GACEpF,EAEW,MAAXmF,GAAmBA,IAAYlF,EAAUkF,SAC3CpF,EAAMsF,WAAWF,GAGL,MAAVC,GAAkBA,IAAWnF,EAAUmF,QACzCrF,EAAMuF,UAAUF,EAEpB,CAbA,iC,kCCAA,sEAEO,MAAMG,EAAYN,aAAyB,SAAyB1F,EAAMM,GAC/E,IAAI,IACF2E,KACG9E,GACDH,EACJ,MAAO,CACLI,SAAU,IAAI6F,YAAiBhB,EAAKnE,YAASX,EAASG,IACtDA,UAEJ,GAAGqF,I","file":"static/js/2.2576811b.chunk.js","sourcesContent":["import { createPathComponent } from '@react-leaflet/core';\nimport { GeoJSON as LeafletGeoJSON } from 'leaflet';\nexport const GeoJSON = createPathComponent(function createGeoJSON(_ref, ctx) {\n  let {\n    data,\n    ...options\n  } = _ref;\n  const instance = new LeafletGeoJSON(data, options);\n  return {\n    instance,\n    context: { ...ctx,\n      overlayContainer: instance\n    }\n  };\n}, function updateGeoJSON(layer, props, prevProps) {\n  if (props.style !== prevProps.style) {\n    if (props.style == null) {\n      layer.resetStyle();\n    } else {\n      layer.setStyle(props.style);\n    }\n  }\n});","export function withPane(props, context) {\n  const pane = props.pane ?? context.pane;\n  return pane ? { ...props,\n    pane\n  } : props;\n}","import { useEffect, useRef } from 'react';\nexport function useEventHandlers(element, eventHandlers) {\n  const eventHandlersRef = useRef();\n  useEffect(function addEventHandlers() {\n    if (eventHandlers != null) {\n      element.instance.on(eventHandlers);\n    }\n\n    eventHandlersRef.current = eventHandlers;\n    return function removeEventHandlers() {\n      if (eventHandlersRef.current != null) {\n        element.instance.off(eventHandlersRef.current);\n      }\n\n      eventHandlersRef.current = null;\n    };\n  }, [element, eventHandlers]);\n}","import { useEffect } from 'react';\nimport { useAttribution } from './attribution';\nimport { useLeafletContext } from './context';\nimport { useEventHandlers } from './events';\nimport { withPane } from './pane';\nexport function useLayerLifecycle(element, context) {\n  useEffect(function addLayer() {\n    const container = context.layerContainer ?? context.map;\n    container.addLayer(element.instance);\n    return function removeLayer() {\n      var _context$layerContain;\n\n      (_context$layerContain = context.layerContainer) == null ? void 0 : _context$layerContain.removeLayer(element.instance);\n      context.map.removeLayer(element.instance);\n    };\n  }, [context, element]);\n}\nexport function createLayerHook(useElement) {\n  return function useLayer(props) {\n    const context = useLeafletContext();\n    const elementRef = useElement(withPane(props, context), context);\n    useAttribution(context.map, props.attribution);\n    useEventHandlers(elementRef.current, props.eventHandlers);\n    useLayerLifecycle(elementRef.current, context);\n    return elementRef;\n  };\n}","import { useEffect, useRef } from 'react';\nexport function useAttribution(map, attribution) {\n  const attributionRef = useRef(attribution);\n  useEffect(function updateAttribution() {\n    if (attribution !== attributionRef.current && map.attributionControl != null) {\n      if (attributionRef.current != null) {\n        map.attributionControl.removeAttribution(attributionRef.current);\n      }\n\n      if (attribution != null) {\n        map.attributionControl.addAttribution(attribution);\n      }\n    }\n\n    attributionRef.current = attribution;\n  }, [map, attribution]);\n}","import React, { forwardRef, useEffect, useImperativeHandle, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { LeafletProvider } from './context';\nexport function createContainerComponent(useElement) {\n  function ContainerComponent(props, ref) {\n    const {\n      instance,\n      context\n    } = useElement(props).current;\n    useImperativeHandle(ref, () => instance);\n    return props.children == null ? null : /*#__PURE__*/React.createElement(LeafletProvider, {\n      value: context\n    }, props.children);\n  }\n\n  return /*#__PURE__*/forwardRef(ContainerComponent);\n}\nexport function createDivOverlayComponent(useElement) {\n  function OverlayComponent(props, ref) {\n    const [isOpen, setOpen] = useState(false);\n    const {\n      instance\n    } = useElement(props, setOpen).current;\n    useImperativeHandle(ref, () => instance);\n    useEffect(function updateOverlay() {\n      if (isOpen) {\n        instance.update();\n      }\n    }, [instance, isOpen, props.children]); // @ts-ignore _contentNode missing in type definition\n\n    const contentNode = instance._contentNode;\n    return contentNode ? /*#__PURE__*/createPortal(props.children, contentNode) : null;\n  }\n\n  return /*#__PURE__*/forwardRef(OverlayComponent);\n}\nexport function createLeafComponent(useElement) {\n  function LeafComponent(props, ref) {\n    const {\n      instance\n    } = useElement(props).current;\n    useImperativeHandle(ref, () => instance);\n    return null;\n  }\n\n  return /*#__PURE__*/forwardRef(LeafComponent);\n}","import { useEffect, useRef } from 'react';\nimport { useLeafletContext } from './context';\nimport { useEventHandlers } from './events';\nimport { useLayerLifecycle } from './layer';\nimport { withPane } from './pane';\nexport function usePathOptions(element, props) {\n  const optionsRef = useRef();\n  useEffect(function updatePathOptions() {\n    if (props.pathOptions !== optionsRef.current) {\n      const options = props.pathOptions ?? {};\n      element.instance.setStyle(options);\n      optionsRef.current = options;\n    }\n  }, [element, props]);\n}\nexport function createPathHook(useElement) {\n  return function usePath(props) {\n    const context = useLeafletContext();\n    const elementRef = useElement(withPane(props, context), context);\n    useEventHandlers(elementRef.current, props.eventHandlers);\n    useLayerLifecycle(elementRef.current, context);\n    usePathOptions(elementRef.current, props);\n    return elementRef;\n  };\n}","import { useEffect, useRef } from 'react';\nexport function createElementHook(createElement, updateElement) {\n  if (updateElement == null) {\n    return function useImmutableLeafletElement(props, context) {\n      return useRef(createElement(props, context));\n    };\n  }\n\n  return function useMutableLeafletElement(props, context) {\n    const elementRef = useRef(createElement(props, context));\n    const propsRef = useRef(props);\n    const {\n      instance\n    } = elementRef.current;\n    useEffect(function updateElementProps() {\n      if (propsRef.current !== props) {\n        updateElement(instance, props, propsRef.current);\n        propsRef.current = props;\n      }\n    }, [instance, props, context]);\n    return elementRef;\n  };\n}","import { useEffect, useRef } from 'react';\nimport { useLeafletContext } from './context';\nexport function createControlHook(useElement) {\n  return function useLeafletControl(props) {\n    const context = useLeafletContext();\n    const elementRef = useElement(props, context);\n    const {\n      instance\n    } = elementRef.current;\n    const positionRef = useRef(props.position);\n    const {\n      position\n    } = props;\n    useEffect(function addControl() {\n      instance.addTo(context.map);\n      return function removeControl() {\n        instance.remove();\n      };\n    }, [context.map, instance]);\n    useEffect(function updateControl() {\n      if (position != null && position !== positionRef.current) {\n        instance.setPosition(position);\n        positionRef.current = position;\n      }\n    }, [instance, position]);\n    return elementRef;\n  };\n}","import { useAttribution } from './attribution';\nimport { useLeafletContext } from './context';\nimport { useEventHandlers } from './events';\nimport { withPane } from './pane';\nexport function createDivOverlayHook(useElement, useLifecycle) {\n  return function useDivOverlay(props, setOpen) {\n    const context = useLeafletContext();\n    const elementRef = useElement(withPane(props, context), context);\n    useAttribution(context.map, props.attribution);\n    useEventHandlers(elementRef.current, props.eventHandlers);\n    useLifecycle(elementRef.current, context, props, setOpen);\n    return elementRef;\n  };\n}","const tileLayer = {\n  attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n  url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n}\n\nexport default tileLayer;","import { createContainerComponent, createDivOverlayComponent, createLeafComponent } from './component';\nimport { createControlHook } from './control';\nimport { createElementHook } from './element';\nimport { createLayerHook } from './layer';\nimport { createDivOverlayHook } from './div-overlay';\nimport { createPathHook } from './path';\nexport function createControlComponent(createInstance) {\n  function createElement(props, context) {\n    return {\n      instance: createInstance(props),\n      context\n    };\n  }\n\n  const useElement = createElementHook(createElement);\n  const useControl = createControlHook(useElement);\n  return createLeafComponent(useControl);\n}\nexport function createLayerComponent(createElement, updateElement) {\n  const useElement = createElementHook(createElement, updateElement);\n  const useLayer = createLayerHook(useElement);\n  return createContainerComponent(useLayer);\n}\nexport function createOverlayComponent(createElement, useLifecycle) {\n  const useElement = createElementHook(createElement);\n  const useOverlay = createDivOverlayHook(useElement, useLifecycle);\n  return createDivOverlayComponent(useOverlay);\n}\nexport function createPathComponent(createElement, updateElement) {\n  const useElement = createElementHook(createElement, updateElement);\n  const usePath = createPathHook(useElement);\n  return createContainerComponent(usePath);\n}\nexport function createTileLayerComponent(createElement, updateElement) {\n  const useElement = createElementHook(createElement, updateElement);\n  const useLayer = createLayerHook(useElement);\n  return createLeafComponent(useLayer);\n}","export function updateGridLayer(layer, props, prevProps) {\n  const {\n    opacity,\n    zIndex\n  } = props;\n\n  if (opacity != null && opacity !== prevProps.opacity) {\n    layer.setOpacity(opacity);\n  }\n\n  if (zIndex != null && zIndex !== prevProps.zIndex) {\n    layer.setZIndex(zIndex);\n  }\n}","import { createTileLayerComponent, updateGridLayer, withPane } from '@react-leaflet/core';\nimport { TileLayer as LeafletTileLayer } from 'leaflet';\nexport const TileLayer = createTileLayerComponent(function createTileLayer(_ref, context) {\n  let {\n    url,\n    ...options\n  } = _ref;\n  return {\n    instance: new LeafletTileLayer(url, withPane(options, context)),\n    context\n  };\n}, updateGridLayer);"],"sourceRoot":""}